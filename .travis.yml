sudo: required
dist: trusty
language: cpp

addons:
  apt:
    sources:
      - llvm-toolchain-trusty-5.0
      - ubuntu-toolchain-r-test
    packages:
      - clang-5.0
      - g++-7
      - lcov
      - cppcheck

matrix:
  include:
    - os: linux
      env: COMPILER=clang CONFIG=Debug COVERAGE=OFF
    - os: linux
      env: COMPILER=clang CONFIG=Release COVERAGE=OFF
    - os: linux
      env: COMPILER=gcc CONFIG=Debug COVERAGE=OFF
    - os: linux
      env: COMPILER=gcc CONFIG=Release COVERAGE=OFF
    - os: linux
      env: COMPILER=gcc CONFIG=Debug COVERAGE=ON
    - os: osx
      env: COMPILER=gcc CONFIG=Release COVERAGE=OFF


before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && pushd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install gcc cppcheck; fi
  - if [[ "$COMPILER" == "clang" ]]; then CC=clang-5.0 && CXX=clang++-5.0; fi
  - if [[ "$COMPILER" == "gcc" ]]; then CC=gcc-7 && CXX=g++-7; fi
  - echo $CC
  - echo $CXX

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.9/cmake-3.9.4-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
  - cmake --version

  ############################################################################
  # Install a recent glog
  ############################################################################
  - GLOG_URL="https://github.com/google/glog/archive/v0.3.5.tar.gz"
  - mkdir glog && travis_retry wget --no-check-certificate --quiet -O - ${GLOG_URL} | tar --strip-components=1 -xz -C glog
  - pushd glog
  - cmake -Bbuild -H.
  - cmake --build build
  - glog_DIR=${DEPS_DIR}/glog/build
  - popd

  - sudo pip install cpplint
  - popd

script:
  # build
  - cmake -Bbuild -H. -DCMAKE_BUILD_TYPE=$CONFIG -DBUILD_COVERAGE=$COVERAGE
  - cmake --build build --config $CONFIG
  # lint
  - cppcheck --error-exitcode=1 src
  - cpplint --recursive src

after_success:
  # codecov
  - |
    if [[ "${COVERAGE}" == "ON" ]]; then
      cmake --build build --config $CONFIG --target core_test_coverage
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    fi

